<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>随想录--（3）思考</title>
      <link href="/2025/03/02/%E6%80%9D%E8%80%83/"/>
      <url>/2025/03/02/%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/2.png"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>​       我开始困惑，计划是否是一种对思考的扼杀？</p><p>​       仅以我为例，每一个平淡又平淡的日子里，生活乐趣很大一部份来自于花费一整天在那份耗费不到五分钟的计划单里打钩，过去是在纸上，后来嫌麻烦，便换成了手机备忘录。看着一连串的词条逐个灰白，我感到一种难以言说的宽慰，可能是这一串划掉的字符告诉我这一天没有白费，我至少有这么一些能够被写下的东西。</p><p>​       想来我一直很喜欢记录。记录看过的电影，记录读过的书，记录想说的话……我曾经猜想，这么做是为了给不善聊天的我增加谈资，像是考试的小抄，谈到情浓处，哪怕陡然忘了要说什么，也能立马翻出来看看。莫怪，因为我的确这样做过。高中时和喜欢的女生相约在晚自习后逛操场，因为下课太晚，寝室关门又太早，我怕一时紧张想说的话来不及告诉她，便提前在便签纸上一一写下。月下闲聊时左手牵着她的手，很冰，许是天气太冷，右手攥着那张便签纸，早已被汗浸湿。</p><p>​       也许可以说，我记下的这些东西，组成了我。</p><p>​       </p><p>​       回到计划。我开始定期的抵触、开始定期的反驳，仿佛在笼子里呆久了的动物渴望放风，但过一段时间又会自愿的回到笼子里。笼子带给我们的是水、是食物、是栖身之处、是也许虚假的满足感。我只需待在这里，按部就班的活着，表演给游客看，表演给自己看，抛弃掉真正的思考，靠忙碌忘掉焦虑，便能活得开心。</p><p>​    但我真正想要的是什么呢？是聚会上、饭桌上说话的底气？是双休日？是稳定的生活？是学历？是钱？</p><p>​       都是。都是吗？</p><p>​       我的贪婪与好胜心决定了我始终会与他人比来比去，我的懦弱与保守决定了随时会放弃比较。也许我无法靠自己得到答案。</p><p>​       我依旧在笼子里，我依旧决定待在笼子里。</p>]]></content>
      
      
      <categories>
          
          <category> book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 文字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随想录--（1）牢骚</title>
      <link href="/2025/03/02/%E7%89%A2%E9%AA%9A/"/>
      <url>/2025/03/02/%E7%89%A2%E9%AA%9A/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/1.png"></p><h2 id="牢骚"><a href="#牢骚" class="headerlink" title="牢骚"></a>牢骚</h2><p>​       下课了，随便在图书馆找一张桌子开始吧。我本想去九楼，但嫌他太远。</p><p>​       睡觉时，该睡觉时，总之就是不该想象的时间，我却总爱去想。彼时我会有一种掀开被子冲下床，然后即刻开始码字的冲动，把那一瞬的念想留下来，无所谓他有没有意义。但我不会那么做，我会向自己推脱：就停留在“想”吧。这一刻的灵感或许对我重要至极？或许我与他们最大的区别就是我没法抓住这转瞬即逝的所谓“灵感”的东西吗？无所谓，天亮后什么都不会留下来。</p><p>​       逛过别人的校园，看过更好的事物后，我难以自制地自卑。尴尬和无地自容的焦躁充斥在交谈里。我后悔自己做过的一些选择，即使我知道不自觉美化了未选择的那条路的结果，人就是这样矛盾的。</p><p>​       我越发觉得自己渴望钱财，但我从没想好要用来干什么。仅仅过了两年，我已经开始怀念少年志气和心比天高了。时常忧虑，时常难堪，诗书、纸笔、文字，曾几何时我视之如“命”的那些东西，有多少还在。</p><p>​       我不想在和别人的比较中选择了错误的路，我想过自己的生活，我想要安稳的生活，“小富即安”于我从来都是褒义词，我想要平淡的生活，偶尔的惊喜才更珍贵，我想要包容我的人，我不必躲藏，不必低下头。嗯这是我想要的，一个包容我的爱人，我爱的人，这自然需要放弃一些东西，如果她真的存在，那我不会在乎这些。记忆中很小时我便有这样的想法了，追名逐利，或者和一个人厮守一生，至于为什么没有想一起拥有二者，我想或许是那时的我就已经意识到这有多困难，不敢妄想。</p><p>​       但，抱歉，我没法忍住不和他人比较。</p><p>​       仿佛，我知道幸福的路在前面，但始终无法走上它。</p>]]></content>
      
      
      <categories>
          
          <category> book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 文字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随想录--（2）筆</title>
      <link href="/2025/03/02/%E7%AD%86/"/>
      <url>/2025/03/02/%E7%AD%86/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/3.png"></p><h2 id="筆"><a href="#筆" class="headerlink" title="筆"></a>筆</h2><p>​       开心的时候，又或许是忙碌的时候，我很少动笔。就像《模拟人生》里的主角，悲伤时我才会开始写字，悲伤是写字的良药，也许是。</p><p>​       结束了十一假期和几位高中同窗的短聚，回杭后，转眼已经一个多月了，今天起床时觉得一阵寒意，才发觉杭州已经悄悄入冬了。</p><p>​       回杭后，我买了两本书。一本是序诗推荐的《我是露西巴顿》，另一本是《当下的力量》。买书的初衷是想在文字里找到孤独的、敏感的共鸣。露西说：“我不想解释，因为如果你和我是一样的人，我不说，你全都懂。”仅是读到这两句话，我便自以为找到了世界的另一个我，我便毅然决然的买下了这本书。不本就该这样吗？即使现如今我也才读了她三分之一不到，但这又何妨，我还有极其漫长的时间来读。</p><p>​       前不久我还在想思考的意义。思考让我困惑，让我惶惶不安，甚而痛苦，甚而悲伤。《当下的力量》里说：“当你以第三人称观察自己，你会发现大多数时候，所谓的思考只是‘本我’操控‘真我’的手段，它让你遗忘自己真正该做什么。”我把书放在床头，但并未读它。我的确让自己忙碌起来了，让思考找不到孔隙插足我的生活。这样感觉很好。</p><p>​       但我并不打算放弃思考。敏感是上天给我的天赋，我能察觉到他人的细微的神情，感受到今天风轻了一点，落叶多了一点，思考他为什么带上耳机，我为什么走在路上。即使有可能的痛苦，那也是写字的良药。</p><p>​       </p><p>​这么一点，稍微，我还能承受。</p>]]></content>
      
      
      <categories>
          
          <category> book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 文字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git自学之旅--chapter1</title>
      <link href="/2025/03/02/Git/"/>
      <url>/2025/03/02/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="一、工作区域与文件状态"><a href="#一、工作区域与文件状态" class="headerlink" title="一、工作区域与文件状态"></a>一、工作区域与文件状态</h2><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><p><img src="/../images/git_img/%E5%8E%9F%E7%90%86%E5%9B%BE.png"></p><p>工作区：文件管理器中能看到的区域（用ls指令可查看）<br>暂存区：由工作区的文件添加 （用git status查看暂存区情况）<br>本地仓库：由暂存区提交（存储各次提交的版本信息）（用git log可查看各次提交信息，git ls-files查看仓库状态）</p><p><img src="/../images/git_img/%E4%B8%89%E4%B8%AA%E5%8C%BA%E5%9F%9F.png"></p><h2 id="二、git指令"><a href="#二、git指令" class="headerlink" title="二、git指令"></a>二、git指令</h2><p><img src="/../images/git_img/git%E6%8C%87%E4%BB%A4.png"></p><p>git add *.txt：这个指令可以批量添加工作区的TXT文件到暂存区<br>git add .：添加当前所以工作区文件到暂存区</p><p>git commit -m “此处写提交信息的记录”<br>这个指令只会（提交）存储暂存区的文件，不会提交工作区</p><p><img src="/../images/git_img/git%E6%8C%87%E4%BB%A42.png"></p><p>git reset用于回溯到某一历史记录（根据对应的版本号），git reflog可查看所有历史提交操作及其对应的版本号<br>![](..&#x2F;images&#x2F;git_img&#x2F;git reset回溯的3种模式.png)</p><p>git diff<br>![](..&#x2F;images&#x2F;git_img&#x2F;git diff版本之间差异比较.png)</p><p>git rm(删除后还要git commit提交才能从版本库中也删除)<br>![](..&#x2F;images&#x2F;git_img&#x2F;git rm删除文件.png)</p><p>.gitignore：把不希望提交的文件添加到.gitignore文件中，则可以在提交时被忽略<br><img src="/../images/git_img/%E6%96%87%E4%BB%B6%E5%BF%BD%E7%95%A5.png"></p><p><img src="/../images/git_img/.gitignore%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99.png"></p><p>git push &amp; git pull<br><em><strong>可以通过添加 “ –force ” 来实现强制push，例如：git push -u origin main –force</strong></em><br><strong><u>要先把ssh公钥添加到想要使用的代码托管平台后才能使用</u></strong></p><p><img src="/../images/git_img/pull&push.png"></p><p><u><strong>下图所示相当于直接把远程仓库克隆到本地</strong></u></p><p><u></u><img src="/../images/git_img/%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E8%BF%9E%E6%8E%A5.png"></p><p><u><strong>下图指的是把本地已有的一个本地仓库与一个远程仓库连接，并且一个本地仓库可以与多个远程仓库（Github,Gitee,Gitlab皆可）连接，用git remote -v可以查看当前本地仓库与哪些远程仓库连接了</strong></u></p><p>添加远程仓库！！！(step1和step2之间还差了一步：git branch -M main)！！！！<br>这里的远程仓库别名一般是origin（默认）</p><p><img src="/../images/git_img/%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png"></p><h2 id="三、其他用到的Linux、vim等指令"><a href="#三、其他用到的Linux、vim等指令" class="headerlink" title="三、其他用到的Linux、vim等指令"></a>三、其他用到的Linux、vim等指令</h2><p>cat <fileName> ：可以查看所选文件的内容<br>echo  (作用很多，可以用于创建文件且向文件中写入信息，也可用于把文件添加进文件夹？)<br>vi <fileName>：用于修改文件</p><p>code . ：可用vscode打开当前目录下的文件</p><h2 id="四、常用代码托管应用（远程仓库）"><a href="#四、常用代码托管应用（远程仓库）" class="headerlink" title="四、常用代码托管应用（远程仓库）"></a>四、常用代码托管应用（远程仓库）</h2><p>1.github<br>2.gitee(码云)：国内，访问快<br>3.gitlab(极狐)：可私有化部署</p><p>这三者的使用方式差不多</p><h2 id="五、在Vscode中操作git"><a href="#五、在Vscode中操作git" class="headerlink" title="五、在Vscode中操作git"></a>五、在Vscode中操作git</h2><p><img src="/../images/git_img/Vscode%E4%B8%AD%E6%93%8D%E4%BD%9Cgit.png"></p><h2 id="六、Git分支"><a href="#六、Git分支" class="headerlink" title="六、Git分支"></a>六、Git分支</h2><h3 id="1-指令"><a href="#1-指令" class="headerlink" title="1.指令"></a>1.指令</h3><p>多个分支之间是并行的</p><p>git branch ：查看分支列表</p><p>git branch &lt;分支名&gt;：创建分支</p><p>git branch -d &lt;分支名&gt;：若所选分支已被合并，则可用此命令删除</p><p>git branch -D &lt;分支名&gt;：强制删除所选分支（当所选分支未合并时）</p><p>git switch &lt;分支名&gt;：切换到所选分支</p><p>git checkout &lt;分支名&gt;：这个命令也是切换，但是有歧义，所以现在多用Switch</p><p>git merge &lt;分支名&gt;(这个指令是把所选的分支合并到当前所在的分支)</p><p>git log –graph –oneline –decorate –all：用于查看分支图<br><img src="/../images/git_img/git%E5%88%86%E6%94%AF%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4.png"></p><h3 id="2-解决合并冲突"><a href="#2-解决合并冲突" class="headerlink" title="2.解决合并冲突"></a>2.解决合并冲突</h3><p>当两个分支对同一个文件的同一个部分做了不同的修改时，若进行合并，则会产生分支合并冲突</p><p><a href="https://blog.csdn.net/weixin_44441131/article/details/131879796">链接：【Git】分支合并&amp;冲突产生与解决-CSDN博客</a><br>关于解决分支冲突，这篇博客讲的还不错</p><h3 id="3-rebase变基"><a href="#3-rebase变基" class="headerlink" title="3.rebase变基"></a>3.rebase变基</h3><p>使用git rebase &lt;分支名&gt;指令可以把所选分支的所有在分叉点以后的提交合并到当前分支的最新提交后面</p><p><img src="/../images/git_img/rebase%E5%8F%98%E5%9F%BA%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p><h3 id="4-merge-与-rebase比较"><a href="#4-merge-与-rebase比较" class="headerlink" title="4.merge 与 rebase比较"></a>4.merge 与 rebase比较</h3><p>merge(一般会选择这个)<br><img src="/../images/git_img/merge%E4%BC%98%E7%BC%BA%E7%82%B9.png"></p><p>rebase<br><img src="/../images/git_img/rebase%E4%BC%98%E7%BC%BA%E7%82%B9.png"></p><h2 id="七、分支管理与工作流模型"><a href="#七、分支管理与工作流模型" class="headerlink" title="七、分支管理与工作流模型"></a>七、分支管理与工作流模型</h2><h3 id="1-GitFlow"><a href="#1-GitFlow" class="headerlink" title="1.GitFlow"></a>1.GitFlow</h3><p><img src="/../images/git_img/GitFlow%E5%B7%A5%E4%BD%9C%E6%B5%81.png"></p><h3 id="2-GitHub-Flow"><a href="#2-GitHub-Flow" class="headerlink" title="2.GitHub Flow"></a>2.GitHub Flow</h3><p>![](..&#x2F;images&#x2F;git_img&#x2F;GitHub Flow工作流.png)</p><h3 id="3-分支管理规范"><a href="#3-分支管理规范" class="headerlink" title="3.分支管理规范"></a>3.分支管理规范</h3><p><img src="/../images/git_img/%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83.png"></p><p>完结撒花！！！</p>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 团队合作 </tag>
            
            <tag> 自学 </tag>
            
            <tag> 多图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux自学之旅--centOS7</title>
      <link href="/2025/03/02/centos7/"/>
      <url>/2025/03/02/centos7/</url>
      
        <content type="html"><![CDATA[<h2 id="1-小技巧汇总"><a href="#1-小技巧汇总" class="headerlink" title="1.小技巧汇总"></a>1.小技巧汇总</h2><h3 id="（1-centos切换中文输入法快捷键"><a href="#（1-centos切换中文输入法快捷键" class="headerlink" title="（1) centos切换中文输入法快捷键"></a>（1) centos切换中文输入法快捷键</h3><p>下载了中文拼音输入法后，在终端里输入时，按win+空格切换</p><h3 id="（2）Linux里面的-和-的区别"><a href="#（2）Linux里面的-和-的区别" class="headerlink" title="（2）Linux里面的 ~ 和 &#x2F; 的区别"></a>（2）Linux里面的 ~ 和 &#x2F; 的区别</h3><p><code>/</code>是根节点， <code>~</code>是 home<br><em><strong>root也是挂载在“&#x2F;”根节点下面的,home也是,所以root和home在同一级目录</strong></em></p><p><img src="/../images/centos_img/001.png"></p><h3 id="（3）运行级别3和运行级别5的切换"><a href="#（3）运行级别3和运行级别5的切换" class="headerlink" title="（3）运行级别3和运行级别5的切换"></a>（3）运行级别3和运行级别5的切换</h3><p>级别3：无图形化界面，大黑屏，最原始的Linux界面，通过Ctrl+alt+F2进入，或者在终端输入init 3；</p><p>级别5：有GUI图形化界面，通过Ctrl+alt+F1进入，或者在终端输入init 5；</p><h3 id="（4）常用快捷键"><a href="#（4）常用快捷键" class="headerlink" title="（4）常用快捷键"></a>（4）常用快捷键</h3><p><img src="/../images/centos_img/017.png"></p><h2 id="2-Vim各模式转换"><a href="#2-Vim各模式转换" class="headerlink" title="2.Vim各模式转换"></a>2.Vim各模式转换</h2><p><img src="/../images/centos_img/002.png"></p><p>在一般模式里按 U 键可以撤回上一步操作</p><h3 id="1-一般模式的基本操作语法"><a href="#1-一般模式的基本操作语法" class="headerlink" title="(1).一般模式的基本操作语法"></a>(1).一般模式的基本操作语法</h3><p><img src="/../images/centos_img/003.png"><br><img src="/../images/centos_img/004.png"></p><h3 id="2-命令模式的基本指令"><a href="#2-命令模式的基本指令" class="headerlink" title="(2).命令模式的基本指令"></a>(2).命令模式的基本指令</h3><p><img src="/../images/centos_img/005.png"></p><h3 id="3-编辑模式的基本语法"><a href="#3-编辑模式的基本语法" class="headerlink" title="(3).编辑模式的基本语法"></a>(3).编辑模式的基本语法</h3><p><img src="/../images/centos_img/006.png"></p><h2 id="3-Vim键盘图"><a href="#3-Vim键盘图" class="headerlink" title="3.Vim键盘图"></a>3.Vim键盘图</h2><p><img src="/../images/centos_img/007.png"></p><h2 id="4-VMware的三种网络连接方式"><a href="#4-VMware的三种网络连接方式" class="headerlink" title="4.VMware的三种网络连接方式"></a>4.VMware的三种网络连接方式</h2><p><img src="/../images/centos_img/008.png"></p><ol><li>桥接模式是跟物理机在同一个网段，并且和物理机用的同一个路由器，虚拟机和物理机是相同的网段</li><li>NAT模式则是在桥接模式之上，但有不同于桥接模式。<br>NAT模式有个单独的路由器，且不同于物理机的网段，NAT模式显示通过自己的路由器，在找到物理机的路由器，来和物理机进行通信的。</li><li>参考链接：<a href="https://blog.csdn.net/qq_45300786/article/details/109900553">NAT模式详解（进阶篇）-CSDN博客</a></li></ol><h2 id="5-使用远程工具连接虚拟机"><a href="#5-使用远程工具连接虚拟机" class="headerlink" title="5.使用远程工具连接虚拟机"></a>5.使用远程工具连接虚拟机</h2><h3 id="（1）xshell"><a href="#（1）xshell" class="headerlink" title="（1）xshell:"></a>（1）xshell:</h3><p>需要先在虚拟机终端里使用ifconfig指令查询虚拟机的公网ip，如图为192.168.40.128</p><p><img src="/../images/centos_img/009.png"></p><p>然后再在xshell的界面里填写即可（<em><strong>注：不知道为什么我的xshell和putty都无法通过虚拟机主机名的方式来远程连接，只能用ip地址</strong></em>），如下图：</p><p><img src="/../images/centos_img/010.png"></p><h3 id="（2）putty"><a href="#（2）putty" class="headerlink" title="（2）putty:"></a>（2）putty:</h3><p>这个工具比较老了，之前搭建MC服务器的时候用过，用来连接王也的阿里云服务器，属于是麻雀虽小五脏俱全。</p><h2 id="6-使用xftp实现主机与虚拟机互传文件"><a href="#6-使用xftp实现主机与虚拟机互传文件" class="headerlink" title="6.使用xftp实现主机与虚拟机互传文件"></a>6.使用xftp实现主机与虚拟机互传文件</h2><p>连接方式与xshell一样，连接成功后可以直接通过左右拖动文件进行互传，示意图如下：</p><p><img src="/../images/centos_img/011.png"></p><h2 id="7-Linux进程运行级别"><a href="#7-Linux进程运行级别" class="headerlink" title="7.Linux进程运行级别"></a>7.Linux进程运行级别</h2><p><img src="/../images/centos_img/012.png"></p><p>在centos7中进程运行级别进行了简化：只保留了两个级别，区别在于有无GUI图形化界面</p><p><img src="/../images/centos_img/013.png"></p><h2 id="8-关机重启命令"><a href="#8-关机重启命令" class="headerlink" title="8.关机重启命令"></a>8.关机重启命令</h2><ol><li>使用shutdown now 命令关机时，会默认先自动进行sync操作，即把内存缓冲区（buffer）里的数据同步到硬盘中，这是因为Linux中采取了一种“预读迟写”的操作，详见下方第二张图的“<a href="">2）经验技巧</a>”部分</li><li>halt指令为停机，类似于Windows系统中的休眠操作</li><li>关机还可以采用先sync，再poweroff的操作</li><li>若直接使用shutdown，不加now关键字，则会延迟1min后再执行关机操作（此处的now为可选项，也可替换为hh:mm的时间形式）</li><li>重启为reboot指令，等同于shutdown -r now</li></ol><p><img src="/../images/centos_img/014.png"><br><img src="/../images/centos_img/015.png"><br><img src="/../images/centos_img/016.png"></p><h2 id="9-命令汇总"><a href="#9-命令汇总" class="headerlink" title="9.命令汇总"></a>9.命令汇总</h2><h3 id="（1）文件管理类"><a href="#（1）文件管理类" class="headerlink" title="（1）文件管理类"></a>（1）文件管理类</h3><ol><li><p>帮助命令：man + 关键字。例如：man ls，会列出ls相关的使用说明与功能。（不过现在一般都直接在浏览器上查了吧）；</p></li><li><p>help + 关键字：对于cd，type，history等内嵌命令（内嵌在shell中），需要用这个命令来查看；</p></li><li><p>内外命令都可以使用的帮助命令：例如 ls –help，cd –help;</p></li><li><p>“.”表示当前目录，“..”表示上一级目录；</p></li><li><p>pwd：显示当前工作目录的绝对路径；</p></li><li><p>ls：列出当前目录的内容<br><img src="/../images/centos_img/018.png"></p></li><li><p>mkdir：创建文件夹；rmdir：删除文件夹；<br>参数：-p可以多级创建与删除，-v可以显示创建与删除的过程；</p></li><li><p>touch+文件名：创建一个空文件；<br>也可以用Vim+文件名直接创建一个文件并编写；</p></li><li><p>cp ：复制文件<br><img src="/../images/centos_img/019.png"></p></li><li><p>rm：一般化删除命令<br><img src="/../images/centos_img/020.png"></p></li><li><p>mv：移动文件、目录or重命名<br><img src="/../images/centos_img/021.png"></p></li><li><p>cat：查看文件内容（适用于小文件，一页能显示完全）<br><img src="/../images/centos_img/022.png"></p><p>more：分屏查看文件内容（基于VI编辑器的，可进行更丰富法的操作）<br><img src="/../images/centos_img/023.png"></p><p>less：分页动态加载查看文件（比more更强大）<br><img src="/../images/centos_img/024.png"></p></li><li><p>echo：类似于print，直接输出后面的语句到控制台<br><img src="/../images/centos_img/025.png"></p><p>输出重定向：覆盖与追加<br><img src="/../images/centos_img/026.png"></p></li><li><p>head&amp;tail<br><img src="/../images/centos_img/027.png"></p><p><img src="/../images/centos_img/028.png"></p></li><li><p>ln：创建软&#x2F;硬链接，软链接类似于win里的快捷方式，硬链接则类似复制体</p></li><li><p>history：查看已经执行过的历史命令（终端）<br>！+ 编号：可以重新执行该编号对应的命令，例如：!125<br>history -c：清空历史记录</p><p><img src="/../images/centos_img/029.png"></p></li></ol><h3 id="（2）日期日历类"><a href="#（2）日期日历类" class="headerlink" title="（2）日期日历类"></a>（2）日期日历类</h3><ol start="17"><li><p>date日期类&amp;cal日历：<br><img src="/../images/centos_img/030.png"></p><p><img src="/../images/centos_img/031.png"></p><p><img src="/../images/centos_img/032.png"></p></li></ol><h3 id="（3）用户管理类"><a href="#（3）用户管理类" class="headerlink" title="（3）用户管理类"></a>（3）用户管理类</h3><ol><li>useradd：创建新用户，passwd：设置用户密码<br><img src="/../images/centos_img/033.png"></li><li>su：切换用户<br><img src="/../images/centos_img/034.png"></li><li>who am i：查看当前用户的信息</li><li>userdel：删除用户</li><li>sudo + 命令：短暂赋予当前用户root权限来执行该命令，类似于win的用管理员模式打开<br><img src="/../images/centos_img/035.png"></li></ol><h3 id="（4）用户组管理类"><a href="#（4）用户组管理类" class="headerlink" title="（4）用户组管理类"></a>（4）用户组管理类</h3><p>类似于SQL中的角色，可以给不同的用户组分配不同的权限，创建用户时加入对应的组<br><img src="/../images/centos_img/036.png"></p><h3 id="（5）文件权限类"><a href="#（5）文件权限类" class="headerlink" title="（5）文件权限类"></a>（5）文件权限类</h3><p>用到的时候再去查<br><img src="/../images/centos_img/037.png"></p><ol><li><p>chmod：更改文件权限<br>例如：chmod ug+rw project.txt   这句命令就是赋予project.txt这个文件的属主和属组 读和写 的权限；<br>也可以用数字来表示，如下图第二种方式</p><p><img src="/../images/centos_img/038.png"></p><p>如果更改对象是一个目录，也可以加一个“-R”，以迭代更改目录下所有目录和文件的权限，如下图第5条<br><img src="/../images/centos_img/039.png"></p></li><li><p>chown：更改文件属主<br><img src="/../images/centos_img/040.png"></p></li><li><p>chgrp：更改文件属组<br><img src="/../images/centos_img/041.png"></p></li></ol><h3 id="（5）搜索查找类"><a href="#（5）搜索查找类" class="headerlink" title="（5）搜索查找类"></a>（5）搜索查找类</h3><p>主要有find、locate和grep，其中find和locate只能精确查找（但是是可以用 * 作为通配符的，例如 “ *.txt ” ），而grep可以模糊查找</p><ol><li>find<br><img src="/../images/centos_img/042.png"></li><li>locate：基于locate数据库，所以使用之前需要先updatedb<br><img src="/../images/centos_img/043.png"></li><li>grep配合 “ | ” 管道符<br>例如：ls | grep -n g 直接把ls的结果作为后面grep的“源文件“参数<br><img src="/../images/centos_img/044.png"><br>补充：wc（word count）命令可统计文件次数等信息，例如 wc 我.txt</li></ol><h3 id="（6）压缩打包类"><a href="#（6）压缩打包类" class="headerlink" title="（6）压缩打包类"></a>（6）压缩打包类</h3><ol><li><p>gzip 和 gunzip  不保留源文件，不能压缩目录<br><img src="/../images/centos_img/045.png"></p></li><li><p>zip 和 unzip  可以压缩目录，且产生一个新文件，保留源文件<br><img src="/../images/centos_img/046.png"></p></li><li><p>tar 打包解包 压缩解压 一体化</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#例如：</span></span><br><span class="line">tar -czf file.tar.gz /root/scripts/test_file</span><br><span class="line"><span class="comment">#特别注意：使用tar的时候，选项czvf等，当有f时，必须把f放在最后，接下来跟指定的压缩包名称，这样才能成功的指定路径和名称</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/centos_img/047.png"></p></li></ol><h3 id="（7）磁盘占用类"><a href="#（7）磁盘占用类" class="headerlink" title="（7）磁盘占用类"></a>（7）磁盘占用类</h3><ol><li>du<br><img src="/../images/centos_img/048.png"></li><li>df<br><img src="/../images/centos_img/049.png"><br><em><strong>注：补充一个查看当前内存使用情况的命令：free -h</strong></em></li><li>lsblk：查看设备挂载<br><img src="/../images/centos_img/050.png"></li><li>mount挂载 与 umount卸载（用到的时候再查）</li><li>fdisk：硬盘分区（用到的时候再查）<br><img src="/../images/centos_img/051.png"></li></ol><h3 id="（8）进程管理类"><a href="#（8）进程管理类" class="headerlink" title="（8）进程管理类"></a>（8）进程管理类</h3><ol><li><p>ps<br><img src="/../images/centos_img/052.png"></p><p><img src="/../images/centos_img/053.png"></p></li><li><p>kill：杀进程命令<br><img src="/../images/centos_img/054.png"></p></li><li><p>pstree：直观查看进程之间的父子关系树<br><img src="/../images/centos_img/055.png"></p></li><li><p>top：实施展示系统进程监控，类似于win的任务管理器<br><img src="/../images/centos_img/056.png"></p></li><li><p>netstat：查看网络状态<br><img src="/../images/centos_img/057.png"></p></li></ol><h3 id="（9）系统任务类"><a href="#（9）系统任务类" class="headerlink" title="（9）系统任务类"></a>（9）系统任务类</h3><ol><li>crontab：系统定时任务管理（用到的时候再搜吧，感觉像日历定时操作）<br><img src="/../images/centos_img/058.png"></li></ol><h2 id="10-软件包管理工具"><a href="#10-软件包管理工具" class="headerlink" title="10.软件包管理工具"></a>10.软件包管理工具</h2><p><img src="/../images/centos_img/067.png"></p><h3 id="（1）rpm"><a href="#（1）rpm" class="headerlink" title="（1）rpm"></a>（1）rpm</h3><ol><li>概述：rpm相当于win里面的setup.exe，就是用来解析安装包然后安装软件的，所以首先得有对应软件的安装包，这个需要用后面讲的yum命令实现<br><img src="/../images/centos_img/059.png"></li><li>查询已安装软件包<br><img src="/../images/centos_img/060.png"></li><li>卸载软件包<br><img src="/../images/centos_img/061.png"></li><li>安装软件包<br><img src="/../images/centos_img/062.png"></li></ol><h3 id="（2）yum"><a href="#（2）yum" class="headerlink" title="（2）yum"></a>（2）yum</h3><ol><li>概述：yum相当于是优化版的rpm，他可以直接从yum镜像源下载软件包以及识别依赖项，并解析软件包然后安装（类似于应用市场的角色？）<br><img src="/../images/centos_img/063.png"></li><li>常用yum指令<br><img src="/../images/centos_img/064.1.png"><br><img src="/../images/centos_img/064.2.png"></li><li>换源操作：其实没啥必要，因为yum会自动根据主机的ip地址选择一个最近的镜像源来下载<br><img src="/../images/centos_img/065.png"></li></ol><h3 id="（3）第三方仓库（例如epel库）"><a href="#（3）第三方仓库（例如epel库）" class="headerlink" title="（3）第三方仓库（例如epel库）"></a>（3）第三方仓库（例如epel库）</h3><p>首先，yum默认是从centos的官方库中去下载软件，可以将 <code>yum</code> 比喻为一个应用商店，但它主要针对的是操作系统级别的软件包（centos官方库中主要拥有的是长期稳定的软件包），而不是像移动设备上的应用程序。<br>如果想要下载sl(动力火车)这样的小程序，或者微信、百度之类的时常更新的软件，则需要从第三方库下载，这些仓库通常是由社区维护的，并且包含了更多种类的软件包。<br><img src="/../images/centos_img/066.png"></p><h2 id="11-shell编程"><a href="#11-shell编程" class="headerlink" title="11.shell编程"></a>11.shell编程</h2><p>概述：<br><img src="/../images/centos_img/068.png"></p><h3 id="（1）初试"><a href="#（1）初试" class="headerlink" title="（1）初试"></a>（1）初试</h3><p>在一个shell脚本里面第一行是用来指定脚本解释器的：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">//这一句就是指定bin目录里的bash作为脚本解释器</span><br></pre></td></tr></table></figure><p><img src="/../images/centos_img/069.png"></p><p><img src="/../images/centos_img/070.png"></p><p><img src="/../images/centos_img/071.png"></p><p><img src="/../images/centos_img/072.png"></p><p>第三种为使用 ‘ . ‘ 或 ‘ source ‘ ，这种方式的好处是直接在当前的bash(shell)里执行命令，可以直接使用父bash里的局部变量；而前两种方法会隐式地打开一个子bash来执行命令，无法使用父bash里的局部变量，除非使用export对局部变量提升为全局变量<br><img src="/../images/centos_img/073.png"></p><h3 id="（2）变量"><a href="#（2）变量" class="headerlink" title="（2）变量"></a>（2）变量</h3><p>和别的编程语言差不多，父子继承，全局局部之类的<br><img src="/../images/centos_img/074.png"><br><img src="/../images/centos_img/075.png"></p><p>实操举例：（如下图）</p><ol><li><p>如果想要进行数值运算的话，需要用 ‘ $ ‘ 符号加上两层小括号或者一层中括号包裹运算式子：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=$((<span class="number">1</span>+<span class="number">5</span>))</span><br><span class="line">b=$[3+4]</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span>,<span class="variable">$b</span></span><br></pre></td></tr></table></figure></li><li><p>使用export把局部变量提升为全局变量，可供其他子shell使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> a</span><br><span class="line">//进入子shell</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol><p><img src="/../images/centos_img/076.png"></p><h3 id="（3）参数（特殊变量）"><a href="#（3）参数（特殊变量）" class="headerlink" title="（3）参数（特殊变量）"></a>（3）参数（特殊变量）</h3><p><img src="/../images/centos_img/077.png"></p><p><img src="/../images/centos_img/078.png"></p><p><img src="/../images/centos_img/079.png"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">下面讲解$*和<span class="variable">$@</span>的区别</span><br></pre></td></tr></table></figure><p><img src="/../images/centos_img/090.png"></p><p><img src="/../images/centos_img/091.png"></p><p><img src="/../images/centos_img/080.png"></p><h3 id="（4）运算符"><a href="#（4）运算符" class="headerlink" title="（4）运算符"></a>（4）运算符</h3><p>注：在双小括号里也可以使用数学上的“&gt;,&lt;,&gt;&#x3D;,&lt;&#x3D;”等符号，例如下面讲for循环的第一种写法</p><p><img src="/../images/centos_img/081.png"></p><h3 id="（5）条件判断"><a href="#（5）条件判断" class="headerlink" title="（5）条件判断"></a>（5）条件判断</h3><p><img src="/../images/centos_img/082.png"></p><p><img src="/../images/centos_img/083.png"></p><p>这里的多条件判断其实就类似于其他语言里面的三目运算符，效果一样</p><p><img src="/../images/centos_img/084.png"></p><h3 id="（6）流程控制"><a href="#（6）流程控制" class="headerlink" title="（6）流程控制"></a>（6）流程控制</h3><ol><li><p>if-else<br><img src="/../images/centos_img/085.png"><br><img src="/../images/centos_img/086.png"></p></li><li><p>case<br><img src="/../images/centos_img/087.png"></p></li><li><p>for循环：特别的，程序控制条件里可以直接使用学上的“&gt;,&lt;,&gt;&#x3D;,&lt;&#x3D;”等符号<br><img src="/../images/centos_img/088.png"></p><p><img src="/../images/centos_img/089.png"></p></li><li><p>while循环<br><img src="/../images/centos_img/092.png"></p></li></ol><h3 id="（7）读取控制台输入"><a href="#（7）读取控制台输入" class="headerlink" title="（7）读取控制台输入"></a>（7）读取控制台输入</h3><p>read<br><img src="/../images/centos_img/093.png"></p><h3 id="（8）系统函数"><a href="#（8）系统函数" class="headerlink" title="（8）系统函数"></a>（8）系统函数</h3><p>shell脚本的系统函数调用方法为：（也被称为命令替换）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$(函数名)</span><br></pre></td></tr></table></figure><p><img src="/../images/centos_img/094.png"></p><p>注意嗷：这里的basename和dirname本质都是对你输入的字符串进行切分，并不会验证输入路径是否真实存在</p><p><img src="/../images/centos_img/095.png"></p><h3 id="（9）自定义函数"><a href="#（9）自定义函数" class="headerlink" title="（9）自定义函数"></a>（9）自定义函数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>关键字、小括号（参数列表）、<span class="built_in">return</span>返回值都可以省略，其中参数列表和脚本一样，都是默认以<span class="variable">$1</span>、<span class="variable">$2</span>这样的位置参数代替</span><br></pre></td></tr></table></figure><p>调用方法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">函数名 传入参数1 传入参数2 ……</span><br><span class="line">eg: add <span class="variable">$a</span> <span class="variable">$b</span></span><br></pre></td></tr></table></figure><p><img src="/../images/centos_img/096.png"></p><p>例如一个简单的加法函数：<br><img src="/../images/centos_img/097.png"></p><p>保留return时，只能返回0-255的数值，很不方便</p><p><img src="/../images/centos_img/098.png"></p><h3 id="（10）正则表达式"><a href="#（10）正则表达式" class="headerlink" title="（10）正则表达式"></a>（10）正则表达式</h3><p><img src="/../images/centos_img/099.png"></p><p><img src="/../images/centos_img/100.png"></p><h3 id="（11）文本处理工具"><a href="#（11）文本处理工具" class="headerlink" title="（11）文本处理工具"></a>（11）文本处理工具</h3><ol><li><p>cut：可以在列上做筛选，配合grep和正则表达式的行筛选，可以实现行列筛选<br><img src="/../images/centos_img/101.png"></p><p><img src="/../images/centos_img/102.png"></p><p><img src="/../images/centos_img/103.png"></p></li><li><p>awk：加强版，可以独自实现行列筛选<br><img src="/../images/centos_img/104.png"></p><p><img src="/../images/centos_img/105.png"></p><p><img src="/../images/centos_img/106.png"></p><p><img src="/../images/centos_img/107.png"></p><p>​</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自学 </tag>
            
            <tag> 多图 </tag>
            
            <tag> Linux </tag>
            
            <tag> centOS7 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
